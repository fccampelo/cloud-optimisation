version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - backend_logs:/app/logs
    networks:
      - cloudops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
    networks:
      - cloudops-network
    depends_on:
      - backend
    restart: unless-stopped

  # Redis Cache (for future implementation)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudops-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - cloudops-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  backend_logs:
  redis_data:

networks:
  cloudops-network:
    driver: bridge 